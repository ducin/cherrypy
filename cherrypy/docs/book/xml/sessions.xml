<?xml version="1.0" encoding="utf-8"?>
<section xmlns:db="http://docbook.org/docbook-ng"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xml:id="sessions">
  <title>Sessions Management</title>
  <abstract>
    <para>
      CherryPY2.1 Includes a powerfull new sessionFilter.
      The old session system was difficult to extend and was not thread safe.  
      The new system adresses these issues and includes several powerfull new features.
    </para>
  </abstract>
  
  <section id="sessionfeaturs">
    <title>Session Features</title>
    <itemizedlist>
      <listitem>Multiple Storage Types</listitem>
      <listitem>Thread Safety</listitem>
      <listitem>Easy to extend</listitem>
      <listitem>Session Caching<listitem>
      <listitem>Multiple Named Sessions</listitem>
    </itemizedlist>
  </section>
  
  <section id="sessionconfig">
    <title>Session Configuration</tile>
  </section>

  <section id="usingsessions">
    <title>Using Sessions</title>
    <section>
      <title>SessionDicts<title>
      <para>
        All session data is accessed through an instance of a SessionDict class.
        SesssionDicts provide a dictionary like interface.
      </para>

      <para>
        The following dictionary methods are provided:
        <itemizedlist>
          <listitem>__setitem__(key, value)</listitem>
          <listitem>__getitem__</listitem>
          <listitem>get(key, default)</listitem>
        </itemizedlist>
        SessionDicts also contain the following attributes:
        <itemizedlist>
          <listitem>sessionKey (read only)</listitem>
          <listitem>lastAccess (read only)</listitem>
          <listitem>createdAt  (read only)</listitem>
          <listitem>timeout   </listitem>
        </itemizedlist>
      </para>
    </section> <!-- end SessionDict section -->

    <section>
      <title>cpg.sessions</title>
      <para>
        cpg.sessions is the single point of access for all session data.
        When each request is proccessed the sessionFilter looks for any sessions defined 
        for requested portion of the site.  For each named session, a SessionDict is created and 
        attached to cpg.sessions, as an attribute bearing the session name.
      </para>
      
      <para>
      Given a session named "checkoutSession", all session data will be accessed through:
      <blockqoute>cpg.sessions.checkoutSession</blockqoute>
      </para>

      <example>
        <title>cpg.session example</title>
        <para>
          This code iterates over a list of items in a shopping cart, and computes 
          The total cost of all items.
        </para>
        <programlisting>
          totalCost = 0.0
          
          for item in cpg.sessions.checkoutSession['shoppingCart']:
              totalCost += item.cost
        </programlisting>
      </example>


      <section>
        <title>The default session</title>
        <para>
          By defualt the session filter provide a session named "default", 
          which is accessed through "cpg.sessions.default".
        </para>

        <para>
          Unless there is a clear advantage to having more that one named sessions, 
          the default session should be used to store all session data.
          The default session may (in the future) optomized to provide better performance
          than can be achived with named sessions.
        </para>
      </section>

    
    </section>
  </section>

  <section id="sessionstoragetypes">
    <title>Session Storage Types</title>
    <para>The folowing storage drivers are built in: ram, file, ayndb, sqlobject</para>
    <section>
      <title>ram storage</title>
      <para>
          The ram driver stores all sessiondata in memory.
          It is the only storage driver capable of holding any python object.
          All session data is lost when the server shuts down (included autoreloads.)
      </para>
    </section> <!-- end ram storage section -->
    
    <section>
      <title>file storage</title>
      <para>
        The file storage driver pickles the data for each session and stores it in a seperate file.  
        Cleaning up expired sessions is a slow operation (this should change soon.)
      </para>
    </section> <!-- end file storage section -->

    <section>
      <title>anydb storage</title>
      <para>
          The anydb storage driver stores session data with the shelve module, which in turn
          uses the anydb module.  The andyb driver can only be used to store picklable objects.
      </para>
    </section> <!-- end anydb storage section -->
    
  </section>

  <section id="customsessionstorage">
    <title>Writing Custom Session Storage Drivers</title>
  </section>

</section>
