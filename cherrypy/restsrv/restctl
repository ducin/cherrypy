"""Command-line front end for the restsrv daemon."""

import getopt
import os
localDir = os.path.dirname(__file__)
import signal
import sys

from cherrypy import restsrv


class _Optionset(object):
    host = '0.0.0.0'
    port = 80
    protocol = 'HTTP/1.1'
    scheme = 'http'
options = _Optionset()

shortopts = []
longopts = [
    # someday: 'cover', 'profile', 'validate', 'conquer',
    'host=', 'port=', '1.0', 'ssl',
    'project=', 'help',
    ]


def help():
    """Print help for webctl command-line options."""
    
    print """
Usage:
    restctl [options] command
    

Options:
  --host=<name or IP addr>: use a host other than the default (%s).
  --port=<int>: use a port other than the default (%s)
  --1.0: use HTTP/1.0 servers instead of default HTTP/1.1
  --ssl: use HTTPS instead of default HTTP
  --project=<module name>: import a module to set up the project
  --help: print this usage message and exit
""" % (options.host, options.port)


def run(args=sys.argv[1:]):
    """Control the restsrv daemon."""
    opts, args = getopt.getopt(args, shortopts, longopts)
    
    if "--help" in opts:
        help()
        return
    
    command = args[0]
    if command == 'start':
        spawn_child(dict(opts))
    elif command == 'stop':
        signal_child('SIGTERM')
    elif command == 'graceful':
        signal_child('SIGUSR1')
    elif command == 'restart':
        signal_child('SIGHUP')


def spawn_child(opts):
    restd_path = os.path.join(localDir, 'restd.py')
    args = [sys.executable, restd_path]
    for k, v in opts.iteritems():
        if v:
            args.append('%s=%s' % (k, v))
        else:
            args.append(k)
    
    pid = os.spawnv(os.P_NOWAIT, sys.executable, args)


def signal_child(signame):
    """Send a signal to the child process or service."""
    if 'win' in sys.platform:
        import win32serviceutil
        if signame == 'SIGTERM':
            win32serviceutil.StopService(service)
        elif signame == 'SIGHUP':
            win32serviceutil.RestartService(service)
    else:
        os.kill(pid, getattr(signal, signame))



if __name__ == '__main__':
    run()
