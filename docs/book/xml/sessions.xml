<?xml version="1.0" encoding="utf-8"?>
<section xmlns:db="http://docbook.org/docbook-ng"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xml:id="sessions">
  <title>Sessions Management</title>
  <abstract>
    <para>
      CherryPY2.1 Includes a powerfull new sessionFilter.
      The old session system was difficult to extend and was not thread safe.  
      The new system adresses these issues and includes several powerfull new features.
    </para>
  </abstract>
  
  <section id="sessionfeaturs">
    <title>Session Features</title>
    <itemizedlist>
      <listitem>Multiple Storage Types</listitem>
      <listitem>Thread Safety</listitem>
      <listitem>Easy to extend</listitem>
      <listitem>Session Caching<listitem>
      <listitem>Multiple Named Sessions</listitem>
    </itemizedlist>
  </section>
  
  <section id="sessionconfig">
    <title>Session Configuration</tile>
  </section>

  <section id="usingsessions">
    <title>Using Sessions</title>
    <section>
      <title>SessionDicts<title>
      <para>
        All session data is accessed through an instance of a SessionDict class.
        SesssionDicts provide a dictionary like interface.
      </para>

      <para>
        The following dictionary methods are provided:
        <itemizedlist>
          <listitem>__setitem__(key, value)</listitem>
          <listitem>__getitem__</listitem>
          <listitem>get(key, default)</listitem>
        </itemizedlist>
        SessionDicts also contain the following attributes:
        <itemizedlist>
          <listitem>sessionKey (read only)</listitem>
          <listitem>lastAccess (read only)</listitem>
          <listitem>createdAt  (read only)</listitem>
          <listitem>timeout   </listitem>
        </itemizedlist>
      </para>
    </section> <!-- end SessionDict section -->

    <section> <!-- cpg.sessions section -->
      <title>cpg.sessions</title>
      <para>
        cpg.sessions is the single point of access for all session data.
        When each request is proccessed the sessionFilter looks for any sessions defined 
        for requested portion of the site.  For each named session, a SessionDict is created and 
        attached to cpg.sessions, as an attribute bearing the session name.
      </para>
      
      <para>
      Given a session named "checkoutSession", all session data will be accessed through:
      <blockqoute>cpg.sessions.checkoutSession</blockqoute>
      </para>

      <example>
        <title>cpg.session example</title>
        <para>
          This code iterates over a list of items in a shopping cart, and computes 
          The total cost of all items.
        </para>
        <programlisting>
          totalCost = 0.0
          
          for item in cpg.sessions.checkoutSession['shoppingCart']:
              totalCost += item.cost
        </programlisting>
      </example>

      <section>
        <title>The default session</title>
        <para>
          By defualt the session filter provide a session named "default", 
          which is accessed through "cpg.sessions.default".
        </para>

        <para>
          Unless there is a clear advantage to having more that one named sessions, 
          the default session should be used to store all session data.
          The default session may (in the future) be optomized to provide better performance
          than can be achived with named sessions.
        </para>
      </section> <!-- end default session section -->
    </section> <!-- end of cpg.sessions section -->
    
    <section> <!-- _cpSessionList section -->
      <title>_cpSessionsList</title>
      <para>
        Named sessions are created by placing an entry into the _cpSessionsList.
        _cpSessionsList is a class attribute containing a list sessions defined for that class.
      </para>
      <example>
        <title>_cpSessionList example</title>
        <para>
        </para>
        <programlisting>
          class myBBS:
              # create a session named 'admin' using the SessionStorageClass
              _cpSessionList = [SessionStorageClass(sessionName = 'admin')]

              def admin(self):
                  if cpg.session.admin['user'] != root:
                      return "you are not root"
        </programlisting>
      </example>
    </section> <!-- end _cpSessionList section -->
      
  </section>

  <section id="sessionstoragetypes">
    <title>Session Storage Types</title>
    <para>The folowing storage drivers are built in: ram, file, ayndb, sqlobject</para>
    <section>
      <title>ram storage</title>
      <para>
          The ram driver stores all sessiondata in memory.
          It is the only storage driver capable of holding any python object.
          All session data is lost when the server shuts down (included autoreloads.)
      </para>
    </section> <!-- end ram storage section -->
    
    <section>
      <title>file storage</title>
      <para>
        The file storage driver pickles the data for each session and stores it in a seperate file.  
        Cleaning up expired sessions is a slow operation (this should change soon.)
      </para>
    </section> <!-- end file storage section -->

    <section>
      <title>anydb storage</title>
      <para>
          The anydb storage driver stores session data with the shelve module, which in turn
          uses the anydb module.  The andyb driver can only be used to store picklable objects.
      </para>
    </section> <!-- end anydb storage section -->
    
    <section>
      <title>Relational Storage</title>
      <para>
        With relation database drivers, all data is stored in a relational database table.  Due to the nature of
        relational databases, there are several restrictions on how data can be stored.  Each session
        is stored as a single row in the session table.  The session table must be created with a column
        for each variable needed by the application.  This makes it impossible to store arbitrary key/value pairs, 
        as can be done using several of the other storage drivers.  Relational database also place
        restrictions on the type of data that can be stored in each column.  Attempting to store the wrong
        type of data in a table will result in an error.
      </para>
      
      <para>
        Despite this restrictions, storing session data in relational database has many advantages.
        Many web applications already use of relational databases, this approach allows session data
        to be integrated into a prexisting database.  This approach allows a level of scalability not possible
        with other storage drivers.  With a network database, session data can be easily shared between a cluster 
        of web servers.
      </para>

      <section>
        <title>sqlobject storage</title>
        <para>
          The sqlobject driver can be used with any database supported by sqlobject.
        </para>
      </section> <!-- end sqlobject storage section -->

      <section>
        <title>pydo storage</title>
        <para>
          A PyDO2 driver will be included in the future.
        </para>
      </section>
      
    </section> <!-- end relational storage section -->
    
  </section> <!-- end sessionstoragetyps section -->

  <section id="customsessionstorage">
    <title>Writing Custom Session Storage Drivers</title>
    
    <section>
      <title>BaseSessionDict</title>
      <para>
        BaseSessionDict is the base class for the dictionary like class used to access session data.
        SessionDicts impliment the most frequently used features of python dictionaries.
        It is important not to add new features to a custom SessionDict class, because it could break
        compatibility with other storage drivers.

        It may not be necessary to write a custom SessionDict class.  The sessoinFilter includes a 
        SimpleSessionDict.  The SimpleSessionDict is used by several storage drivers and may be 
        adequate for a custom storage driver.
      </para>
    </section>

    <section> 
      <title>BaseSession</title>
      <para>
        BaseSession os the base class for all session storage drivers.  There are a number of methods that must be
        implimented by every storage driver.
      </para>
    </section>
    
  </section>

</section>
