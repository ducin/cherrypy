<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:db="http://docbook.org/docbook-ng" xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xml:id="globaloverviewcherrypy">
    <title>Global Overview</title>
    <section>
        <title>Mapping URI's to handlers</title>
        <para>CherryPy has lots of fancy features to help you manage HTTP messages. But the most
        fundamental thing it does is allow you to map URI's to handler functions. It does this in a
        very straightforward way: the path portion of a URI is heirarchical, so CherryPy uses a
        parallel heirarchy of objects, starting with <code>cherrypy.root</code>. If your application
        receives a request for "/admin/user?name=idunno", then CherryPy will try to find the handler:
        <code>cherrypy.root.admin.user</code>. If it exists, is callable, and has an "exposed = True"
        attribute, then CherryPy will hand off control to that function. Any URI parameters (like
        "name=idunno", above) are passed to the handler as keyword arguments.</para>
        <section>
            <title>Index methods</title>
            <para>There are some special cases, however. To what handler should we map a path like
            "/admin/search/"? Note the trailing slash after "search"â€”it indicates that our path has
            three components: "admin", "search", and "". Static webservers interpret this to mean
            that the <code>search</code> object is a directory, and, since the third component is
            blank, they use an <code>index.html</code> file if it exists. CherryPy is a dynamic
            webserver, so it allows you to specify an <code>index</code> method to handle this. In
            our example, CherryPy will look for a handler at
            <code>cherrypy.root.admin.search.index</code>. Let's pause and show our example
            application so far:</para>
            <example>
                <title>Sample application (handler mapping example)</title>
                <programlisting>import cherrypy

class Root:
    def index(self):
        return "Hello, world!"
    index.exposed = True

class Admin:
    def user(self, name=""):
        return "You asked for user '%s'" % name
    user.exposed = True

class Search:
    def index(self):
        return search_page()
    index.exposed = True

cherrypy.root = Root()
cherrypy.root.admin = Admin()
cherrypy.root.admin.search = Search()</programlisting>
            </example>
            <para>So far, we have three exposed handlers:</para>
            <itemizedlist>
                <listitem>
                    <para><code>root.index</code>. This will be called for the URI's "/" and
                    "/index".</para>
                </listitem>
                <listitem>
                    <para><code>root.admin.user</code>. This will be called for the URI
                    "/admin/user".</para>
                </listitem>
                <listitem>
                    <para><code>root.admin.search.index</code>. This will be called for the URI's
                    "/admin/search/" and "/admin/search".</para>
                </listitem>
            </itemizedlist>
            <para>Yes, you read that third line correctly: <code>root.admin.search.index</code> will
            be called whether or not the URI has a trailing slash. Actually, that isn't quite true;
            CherryPy will answer a request for "/admin/search" (without the slash) with an HTTP
            Redirect response. Most browsers will then request "/admin/search/" as the redirection
            suggests, and <emphasis>then</emphasis> our <code>root.admin.search.index</code> handler
            will be called. But the final outcome is the same.</para>
        </section>
        <section>
            <title>Positional Parameters</title>
            <para>Now, let's consider another special case. What if, instead of passing a user name
            as a parameter, we wish to use a user id as part of the path? What to do with a URI like
            "/admin/user/8173/schedule"? This is intended to reference the schedule belonging to
            "user #8173", but we certainly don't want to have a separate function for each user
            id!</para>
            <para>CherryPy allows you to map a single handler to multiple URI's with the simple
            approach of <emphasis>not writing handlers you don't need</emphasis>. If a node in the
            <code>cherrypy.root</code> tree doesn't have any children, that node will be called for
            all of its child paths, and CherryPy will pass the leftover path info as positional
            arguments. In our example, CherryPy will call <code>cherrypy.root.admin.user("8173",
            "schedule")</code>.</para>
        </section>
    </section>
</section>